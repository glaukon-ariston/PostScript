%!PS-Adobe-3.0
%%Title: layout/2d.ps
%%BoundingBox: 0 0 2579 1729
%%DocumentPaperSizes: A0
%%DocumentMedia: A0 2579 1729 0 () ()
%%Orientation: Portrait
%%Creator: github.com/user/glaukon-ariston
%%Copyright: (C) 2019 Galukon Ariston. All Rights Reserved
%%Date: 14/01/2019
%%LanguageLevel: 3
%%EndComments


(layout/streamIO.ps) run


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 2D Laoyout 
% box :: (width,height)
% stripH :: [box]
% stripV :: [box]
% page :: [stripH] | [stripV]
% profile :: [box]
% profile = ...
% A [box] representation of the lowest contour. The boxes get layed out 
% horizonatlly from left to right (or top to bottom) starting from the 
% top left corner.
% Something akin to a 2D watermark - the line that represents how far
% we got with laying out boxes.
%

% wx wy fixedImageSize /calcBoxSizeWithFixedHeight width height
/calcBoxSizeWithFixedHeight {
	3 1 roll div  			% fixedImageSize wx/wy
	1 index mul 			% fixedImageSize width
	exch
}.


% wx wy fixedImageSize /calcBoxSizeWithFixedWidth width height
/calcBoxSizeWithFixedWidth {
	3 1 roll exch div		% fixedImageSize wy/wx
	1 index mul 			% fixedImageSize height
	titleHeight add			% fixedImageSize height
}.


% wx wy fixedImageSize /calcImageSizeWithFixedHeight width height
/calcImageSizeWithFixedHeight {
	3 1 roll div  			% fixedImageSize wx/wy
	1 index mul 			% fixedImageSize width
	exch
}.


% wx wy fixedImageSize /calcImageSizeWithFixedWidth width height
/calcImageSizeWithFixedWidth {
	3 1 roll exch div		% fixedImageSize wy/wx
	1 index mul 			% fixedImageSize height
}.


% Walk the profile and find the place where it can put the box of the given dimensions.
% There are many strategies for this.
% Will use the following simple strategy:
% 
% metaBox pivot profile /placeBox <</location [x y] /meta>>
/placeBox { <<>> begin
	/profile ;
	/pivot ;
	/meta ;
	profile {
		def
	} forall
end}.


% imageDir pathMeta dictParams /renderPage countImage
/renderPage { begin 
	mkMetaParser /nextMeta ;
	% profile: current contour of layed out boxes (flat line of zero height at the start)
	/profile [[canvasSize #x 0]] def
	% page: holds rows of boxes
	/page [] def
	% row: current row of boxes
	/row [] def
	% pivot: current pivot location 
	/pivot 0 def
	nextMeta { % <<filepath filename timestamp title width height>>
		/meta ;
		pivot profile placeBox
		% 
	} iterate
end}.


% imageDir pathMeta /renderPage countImage
/renderPageSeparateLP { <<>> begin
	mkMetaParser /nextMeta ;

	% - /nextMeta <<filepath filename timestamp title width height>>
	/nextMeta ' i.consume {begin width height gt end} f.partition
	/ps ;	% portraits
	/ls ; 	% landscapes

	% Minimise row and column interspace by slightly changing the image size
	1 fixedImageSize {computeParams begin rowInterspace columnInterspace mul end } downhill
	computeParams 
	begin
		[/lsCount /psCount /lpRatio /imageSizeRatio 
			/landscapeWidth /landscapeHeight 
			/landscapeBoxHeight 
			/maxInaRowL /maxInaColumnL 
			/maxInaRowP /maxInaColumnP
			/portraitCount
			/portraitInaRow /verticalPortraitInterspace /portraitInterspace  
			/landscapeInaRow /landscapeInaChunk /landscapeChunks /landscapeChunkRemainder
			/horizontalInterspace /columnInterspace /verticalInterspace /rowInterspace
			] d.showKeys

		[/horizontalInterspace /columnInterspace /verticalInterspace /rowInterspace /verticalPortraitInterspace
			/landscapeWidth /landscapeHeight 
			/landscapeBoxHeight 
		] (mm) d.showLabels

		0 /imageTotal ;
		ls i.iterator /nextLandscape ;
		ps i.iterator /nextPortrait ;

		% Landscape pictures are layed out first following by portrait ones

		% Initial location of the first picture
		PageSize !y margin !t sub /y ;

		maxInaColumnL { % repeat
			{placeLandscape} {skipPortrait} placeRow
			/y landscapeBoxHeight rowInterspace add -=
		} repeat

		% Initial location of the first picture
		PageSize !y margin !t sub /y ;
		{skipLandscape} {placePortraitColumn} placeRow

		imageTotal
	end
end}.


% {placeLandscape} {placePortrait} /placeRow -
/placeRow { <<>> begin
	/.placePortrait ;
	/.placeLandscape ;
	
	margin !l /x ;
	portraitInaRow /portraitCount ;

	% Layout the first landscape chunk in a row
	% Adjust the x offset for the first in a row
	/x columnInterspace -=
	landscapeInaChunk { % repeat
		.placeLandscape 
	} repeat
	.placePortrait
	/portraitCount 1 -= 
	% Interleave landscape and portrait in a row
	landscapeChunks 1 sub { % repeat
		landscapeInaChunk { .placeLandscape } repeat
		portraitCount 0 gt {
	 		.placePortrait
	 		/portraitCount 1 -=
		} if 
	} repeat
	portraitCount 0 gt landscapeChunkRemainder 0 gt and {
 		.placePortrait
 		/portraitCount 1 -=
	} if 
	landscapeChunkRemainder { % repeat
		.placeLandscape 
	} repeat
end}.


% Layout the next picture and advance the current x pointer to the next position
% - /placeLandscape -
/placeLandscape {<<>> begin
	nextLandscape not {exit} if
	/imageMeta ;
	% <<filepath filename timestamp title width height>>
	/x columnInterspace +=
	x y landscapeHeight imageMeta renderPictureWithTitle
	/boxHeight ;
	/boxWidth ;
	/x boxWidth +=
	/imageTotal 1 +=
end}.


% - /skipLandscape -
/skipLandscape {
	/x columnInterspace +=
	[(Landscape skip. ) (xy) [x y] (mm) d.toStringLabel (\n)] s.concat print
	/x landscapeWidth +=
}.


% Layout the next picture and advance the current x pointer to the next position
% - /placePortrait -
/placePortraitColumn {<<>> begin
	/x columnInterspace +=
	y /y' ;
	maxInaColumnP { % repeat
		nextPortrait not {exit} if
		/imageMeta ;
		% <<filepath filename timestamp title width height>>
		x y' landscapeWidth imageMeta renderPictureWithTitle
		/boxHeight ;
		/boxWidth ;
		/y' boxHeight portraitInterspace add -=
		/imageTotal 1 +=
	} repeat
	/x boxWidth +=
end}.


% Advance the current x pointer to the next position without laying out the picture
% - /skipPortrait -
/skipPortrait {
	/x columnInterspace +=
	[(Portrait skip. ) (xy) [x y] (mm) d.toStringLabel (\n)] s.concat print
	/x landscapeHeight +=
}.


% guessedImageSize /computeParams <<dict>>
/computeParams { <<>> begin
	/guessedImageSize ;

	ls length /lsCount ;
	ps length /psCount ;
	lsCount psCount div /lpRatio ;

	ls !0 begin width height div end /imageSizeRatio ;
	ls !0 begin width height guessedImageSize calcImageSizeWithFixedWidth end /landscapeHeight ; /landscapeWidth ; 
	landscapeHeight titleHeight add /landscapeBoxHeight ;
	landscapeWidth titleHeight add /portraitBoxHeight ;
	
	% assume horizontal placement from left to right
	% estimate the maximum number of pictures we can fit on the provided canvas
	
	% All pictures with landscape orientation
	canvasSize !x 
		landscapeWidth minInterspace add 
		div floor cvi /maxInaRowL ;
	canvasSize !y 
		landscapeBoxHeight minInterspace add 
		div floor cvi /maxInaColumnL ;

	% All pictures with portrait orientation
	canvasSize !x 
		landscapeHeight minInterspace add 
		div floor cvi /maxInaRowP ;
	canvasSize !y 
		portraitBoxHeight minInterspace add 
		div floor cvi /maxInaColumnP ;

	maxInaRowL maxInaColumnL mul lpRatio div 	% target count of portrait pictures
		maxInaColumnP 
		maxInaRowL maxInaColumnL mul 4 div 
			maxInaColumnP
			ps length
			limit								% at least maxInaColumnP portrait pictures, but no more than available
		limit  									% at least maxInaColumnP portrait pictures, but no more than a quarter of landscape ones
	maxInaColumnP multipleUp 
	/portraitCount ;

	portraitCount maxInaColumnP div cvi /portraitInaRow ;
	
	canvasSize !x 
		landscapeHeight minInterspace add portraitInaRow mul
		sub
		landscapeWidth minInterspace add 
		div floor cvi /landscapeInaRow ;

	landscapeInaRow portraitInaRow 1 sub add 
		portraitInaRow div cvi /landscapeInaChunk ;

	canvasSize !x
		landscapeInaRow landscapeWidth mul
		portraitInaRow landscapeHeight mul
		add sub /horizontalInterspace ; 
	horizontalInterspace 
		landscapeInaRow portraitInaRow add 1 sub div /columnInterspace ;

	canvasSize !y
		maxInaColumnL landscapeBoxHeight mul
		sub /verticalInterspace ;
	verticalInterspace
		maxInaColumnL 1 sub div /rowInterspace ;

	canvasSize !y
		maxInaColumnP portraitBoxHeight mul
		sub /verticalPortraitInterspace ;
	verticalPortraitInterspace
		maxInaColumnP 1 sub div /portraitInterspace ;

	landscapeInaRow landscapeInaChunk idiv /landscapeChunks ;
	landscapeInaRow landscapeInaChunk mod /landscapeChunkRemainder ;

	currentdict end
}.


% x y imageHeight imageMeta /renderPictureWithTitle width height
/renderPictureWithTitle {begin  	% <<filepath filename timestamp title width height>>
	[/xx /yy /imageHeight] let
		width height imageHeight calcImageSizeWithFixedHeight /imageHeight ; /imageWidth ;

		/yy imageHeight titleHeight add -=
		yy titleHeight 2 div add /yt ;

		[timestamp ( ) filename ( ) 
			(xywh) [xx yy imageWidth imageHeight] (mm) d.toStringLabel 
			( ") title (" ) filepath (\n)] s.concat ==

		gsave
		cmykTitle !_ setcmykcolor
		imageWidth 2 mul 3 div /txtwide ;
		xx yt [(|0|L) title] s.concat cl % render paragraph

		cmykTimeStamp !_ setcmykcolor
		xx imageWidth add yt [(|0) timestamp (\n) filename (.) s.stripAfter] s.concat cr % render paragraph
		grestore

		filepath
			xx yy titleHeight add
			imageHeight showJpeg 
			titleHeight add

		true {
			gsave
			0.93 setgray
			xx yy imageWidth titleHeight rectstroke
			grestore
		} if

	end
end}.


% <<
% 	/orientation /horizontal
% 	/captionFontSize 8
% 	/titleHeight captionFontSize 3 mul
% 	/canvasSize [[PageSize [margin !l margin !r add margin !t margin !b add]] {sub} a.forall]
% 	/minInterspace 5 mm
% 	/fixedImageSize 5 inch
% 	/cmykTitle [0 0.67 0.95 0]
% 	/cmykTimeStamp [0 0.81 0.95 0.09]
% >> 
% imageDir metaFile dict /layout countImage
/layout {
	dup d.showDict
begin
	% /canvasSize
	[/canvasSize /fixedImageSize /titleHeight /minInterspace] (mm) d.showLabels
	renderPageSeparateLP
end}.


% A trivial iterative minimum search.
% epsilon x0 (x /f y) /downhill x_min
/downhill {
	[/epsilon /x /f] let
		x f /y ; 
		{ % loop
			x epsilon add /x' ;
			x' f /y' ;
			y' y gt { x exit } { % ifelse
				/x x' store
				/y y' store
				[([) x d.toStringAny ( ) y d.toStringAny (] )] s.concat print
			} ifelse
		} loop
	end
}.


% 0.1 0 {sin} downhill == 0
% 0.1 0 {cos} downhill == 0



% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 2D Laoyout 

% GS>clear (photoCollage.ps) run
% PageSize: [2579.53 1729.13]
% canvasSize: [2435.53 1585.13]
% fixedInterspace: 8.50394
% fixedImageSize: 216
% titleHeight: 24
% Main
% <<
% /cmykBackground arraytype [0 0 0 1]
% /minInterspace realtype 14.1732
% /fixedImageSize integertype 288
% /canvasSize arraytype [2435.53 1585.13]
% /cmykTimeStamp arraytype [0 0.81 0.95 0.09]
% /titleHeight integertype 32
% /orientation nametype horizontal
% /captionFontSize integertype 8
% /cmykTitle arraytype [0 0.67 0.95 0]
% >>
% canvasSize: [859.2 559.2]mm
% fixedImageSize: 101.6mm
% titleHeight: 11.2889mm
% minInterspace: 5.0mm
% [289 900.607] [290 838.601] lsCount: 55
% psCount: 27
% lpRatio: 2.03704
% imageSizeRatio: 1.33333
% landscapeWidth: 290
% landscapeHeight: 217.5
% landscapeBoxHeight: 249.5
% maxInaRowL: 8
% maxInaColumnL: 6
% maxInaRowP: 10
% maxInaColumnP: 5
% portraitCount: 15
% portraitInaRow: 3
% portraitInterspace: -6.21652
% landscapeInaRow: 5
% landscapeInaChunk: 2
% landscapeChunks: 2
% landscapeChunkRemainder: 1
% columnInterspace: 47.5754
% rowInterspace: 17.6268
% columnInterspace: 16.7835mm
% rowInterspace: 6.21834mm
% landscapeWidth: 102.306mm
% landscapeHeight: 76.7292mm
% landscapeBoxHeight: 88.0181mm

