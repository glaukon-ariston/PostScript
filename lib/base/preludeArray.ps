%!PS-Adobe-3.0
%%Title: preludeArray.ps
%%Creator: github.com/glaukon-ariston
%%Copyright: Glaukon Ariston. All Rights Reserved
%%Date: 14/01/2019
%%LanguageLevel: 3
%%EndComments


%/preludeArray <<>> def
%preludeArray begin


% [a] /!n a[n]
/!0 {0 get}.
/!0= {0 exch put}.
% [a] num /!0+= - {
/!0+= {
	1 index 0 get 	% [a] num val
	add 0 exch 		% [a] 0 sum
	put
}.

/!1 {1 get}.
/!1= {1 exch put}.
% [a] num /!1+= - {
/!1+= {
	1 index 1 get 	% [a] num val
	add 1 exch 		% [a] 1 sum
	put
}.

/!2 {2 get}.
/!2= {2 exch put}.
% [a] num /!2+= - {
/!2+= {
	1 index 2 get 	% [a] num val
	add 2 exch 		% [a] 2 sum
	put
}.

/!3 {3 get}.
/!3= {3 exch put}.
% [a] num /!3+= - {
/!3+= {
	1 index 3 get 	% [a] num val
	add 3 exch 		% [a] 3 sum
	put
}.

/!x {!0} .
/!x= {!0=} .
/!x+= {!0+=} .
/!y {!1} .
/!y= {!1=} .
/!y+= {!1+=} .
/!w {!2} .
/!w= {!2=} .
/!w+= {!2+=} .
/!h {!3} .
/!h= {!3=} .
/!h+= {!3+=} .

/!t {!0} .
/!t= {!0=} .
/!t+= {!0+=} .
/!l {!1} .
/!l= {!1=} .
/!l+= {!1+=} .
/!b {!2} .
/!b= {!2=} .
/!b+= {!2+=} .
/!r {!3} .
/!r= {!3=} .
/!r+= {!3+=} .


% [a] /!_ a1..an
/!_ {aload pop}.


% num|string num|string /compare -1|0|1
/compare {
	2 copy lt { pop pop -1 } { eq {0} {1} ifelse } ifelse
}.


% any any {cmp} /deepCmp -1|0|1
/deepCmp {
	3 1 roll 	% {cmp} any any
	2 copy type exch type ne { 3 -1 roll } { % ifelse
		dup type /arraytype ne { 3 -1 roll } { % ifelse
			2 copy length exch length ne { 3 -1 roll } { % ifelse
				% if we got to here then we have two array objects of equal lengths to compare
				% NB: {} type == /arraytype
				[ &312 ] 0 exch 		% {cmp} 0 [any any]
				{
					deepCmp dup 0 ne { 
						exch pop exit 	% exec of constant yield constant
					} {
						pop
					} ifelse
				} 4 -1 roll 			%  0 [any any] {loop-body} {cmp}
				cons
				a.forall
			} ifelse
		} ifelse
	} ifelse
	exec
}.


% Assertions
[
	{ [1 2 3] [1 2 3] /compare ' deepCmp 0 eq }
	{ [1 2 3] [1 2 4] /compare ' deepCmp -1 eq }
	{ [1 2 [(BAB)]] [1 2 [(ABA)]] /compare ' deepCmp 1 eq } 
] d.assert!



% (++) :: [a] -> [a] -> [a]
% Append two lists.
% array1 array2 /a.++ array1+array2
/a.++ {
	exch
	[ 3 1 roll 
		aload length
		% [ array2 a1_n..a1_1 n
		1 add -1 roll
		aload pop
	]
} .


% array val /a.find index true | false
/a.find {
	false
	3 1 roll 0		% false array val 0 
	3 -1 roll
	% false val 0 array
	{ % false val index elem
		2 index eq { 	% false val index
			true
			4 -2 roll
			exit
		} {
			1 add
		} ifelse
	} forall
	pop pop
}.


% Assertions
[ 
	{ [[1 2 3 4] 3 a.find] [2 true] deepEq } 
	{ [[1 2 3 4] 5 a.find] [false] deepEq } 
] d.assert!


% interleave :: [a] -> [a] -> [a]
% Merges elements from two lists into one list in an alternating way.
%     interleave [0,1,2,3] [10,11,12,13] == [0,10,1,11,2,12,3,13]
% [a1] [a2] /a.interleave [a]
/a.interleave {
    mark 3 1 roll
    i.iterator
    exch
    i.iterator
    [/next2 /next1] let
        {
            next1 not {exit} if
            next2 not {exit} if
        } loop
    end
    ]
}.


% Assertions
[
    { [] [] a.interleave [] deepEq } 
    { [1] [] a.interleave [1] deepEq } 
    { [] [1] a.interleave [] deepEq } 
    { [1 3 5] [2 4] a.interleave [1 2 3 4 5] deepEq } 
    { [1 3 5] [2 4 6] a.interleave [1 2 3 4 5 6] deepEq } 
] d.assert!



%end	% preludeArray

%%EndProlog

%%BeginSetup
%%EndSetup

%%BeginScript
%%EndScript

%%Trailer
%%EOF
