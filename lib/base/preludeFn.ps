%!PS-Adobe-3.0
%%Title: preludeFn.ps
%%Creator: github.com/glaukon-ariston
%%Copyright: Glaukon Ariston. All Rights Reserved
%%Date: 14/01/2019
%%LanguageLevel: 3
%%EndComments


%/preludeFn <<>> def
%preludeFn begin


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% List transformations

% map f xs is the list obtained by applying f to each element of xs
%
% map :: (a -> b) -> [a] -> [b]
% array|string|proc proc /f.map array|string|proc 
/f.map {
	[/.xs /.proc] let
        /.result .xs length 
             .xs type /stringtype eq {string} {array} ifelse .
        /.i 1 array . 
		% - /.map -
        { 
            0 1 .xs length 1 sub { % for 0..length-1
                dup .i 0  3 -1 roll  put 
                .xs exch get 
                .proc exec 
                .result .i 0 get  3 -1 roll  put 
            } for 
            .result 
            .xs xcheck {cvx} if
        } a.localBind 
    end 
    exec 
}. 


% Assertions
[
	{ [1 2 3 4] {1 add} f.map [2 3 4 5]	deepEq }
	{ << /proc {1 add} >> begin [1 2 3 4] /proc cvx f.map end [2 3 4 5]	deepEq }
	{ << /proc {1 add} >> begin [1 2 3 4] /proc ' f.map end [2 3 4 5] deepEq }
	{ [5 [1 2 3 4] {1 index add} f.map] [5 [6 7 8 9]] deepEq }
] d.assert!


% array|string|proc proc /f.map* array|string|proc
/f.map* { 
	1 index f.pickArrayConverter
	mark
	4 2 roll	% typeConverter mark array proc
	forall ]	% typeConverter [a1..an] 
	exch 
	exec
}.


% Assertions
[
	{ (abcde) {1 add} f.map* (bcdef) deepEq }
	{ << /proc {1 add} >> begin (abcde) /proc ' f.map* end (bcdef) deepEq }
	{ [1 2 3 4 5] {1 add} f.map* [2 3 4 5 6] deepEq }
	{ {1 2 add} {dup xcheck not {1 add} if} f.map* {2 3 add} deepEq }
] d.assert!


% array|string proc /f.map** array|string 
/f.map** { 
	1 index type
	mark
	4 2 roll
	% type mark array proc
	forall
	counttomark 
	% type mark a1..an n 
	dup 3 add -2 roll 
	% a1..an n type mark
	pop /stringtype eq { string s.store } { array astore } ifelse
}.



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Sublists
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Extracting sublists


% take n, applied to a list xs, returns the prefix of xs of length n, 
% or xs itself if n > length xs
%
% take :: Int -> [a] -> [a]
% [a] int /f.take [a] 
/f.take { 
	dup 2 index length gt { pop } { % ifelse
		0 exch getinterval
	} ifelse 
}.


% Assertions
[
	{ [] 5 f.take [] deepEq }
	{ [1 2 3] 0 f.take [] deepEq }
	{ [1 2 3] 2 f.take [1 2] deepEq }
	{ [1 2 3] 5 f.take [1 2 3] deepEq }
	{ {1 2 add bla} 3 f.take {1 2 add} deepEq }
	{ (abcdef) 3 f.take (abc) deepEq }
] d.assert!


% drop n xs returns the suffix of xs after the first n elements, 
% or [] if n > length xs
%
% drop :: Int -> [a] -> [a]
% [a] int /f.drop [a] 
/f.drop { 
	dup 2 index length gt { pop pop [] } { % ifelse
		dup 2 index length exch sub getinterval
	} ifelse 
}.


% Assertions
[
	{ [] 5 f.drop [] deepEq }
	{ [1 2 3] 0 f.drop [1 2 3] deepEq }
	{ [1 2 3] 1 f.drop [2 3] deepEq }
	{ [1 2 3] 5 f.drop [] deepEq }
	{ {1 2 add bla} 2 f.drop {add bla} deepEq }
	{ (abcdef) 3 f.drop (def) deepEq }
] d.assert!


% splitAt n xs returns a tuple where first element is xs prefix of 
% length n and second element is the remainder of the list
%
% splitAt :: Int -> [a] -> ([a], [a])
% [a] int /f.splitAt [prefix] [suffix]
/f.splitAt { 
	dup 2 index length gt { pop [] exch } { % ifelse
		2 copy
		0 exch getinterval 							% [a] int (take n)
		3 1 roll
		dup 2 index length exch sub getinterval		% (take n) (drop n) 
	} ifelse 
}.


% Assertions
[
	{ [[] 5 f.splitAt] [[] []] deepEq }
	{ [[1 2 3] 0 f.splitAt] [[] [1 2 3]] deepEq }
	{ [[1 2 3] 1 f.splitAt] [[1] [2 3]] deepEq }
	{ [[1 2 3] 5 f.splitAt] [[] [1 2 3]] deepEq }
	{ [{1 2 add bla} 2 f.splitAt] [{1 2} {add bla}] deepEq }
	{ [(abcdef) 3 f.splitAt] [(abc) (def)] deepEq }
] d.assert!


% takeWhile, applied to a predicate p and a list xs, returns the 
% longest prefix (possibly empty) of xs of elements that satisfy p
%
% takeWhile :: (a -> Bool) -> [a] -> [a]
% [a] predicate /f.takeWhile [a]
/f.takeWhile {
	[0]
	[/.xs /.predicate /.i] let
		{
			0 1 .xs length 1 sub { % for 0..length-1
				dup .i 0  3 -1 roll  put 				% set current index
				.xs exch get 							% get current value
				.predicate exec not { % if
					exit
				} if
			} for
			.xs 0 .i 0 get getinterval
		} a.localBind
	end
	exec
}.


% [a] predicate /f.takeWhile* [a]
/f.takeWhile* { 
	{exec {1 add} {exit} ifelse} exch cons 		% [a] predicate*
	0 exch 2 index exch 						% [a] 0 [a] predicate*
	forall 										% [a] count
	0 exch getinterval
}.


% Assertions
[
	{ [] {3 lt} f.takeWhile [] deepEq }
	{ [1 2 3 4 5] {3 lt} f.takeWhile [1 2] deepEq }
	{ {1 2 3.0 add bla} {type /integertype eq} f.takeWhile {1 2} deepEq }
	{ (abcdef) {(d) head lt} f.takeWhile (abc) deepEq }
] d.assert!


% dropWhile p xs returns the suffix remaining after takeWhile p xs
%
% dropWhile :: (a -> Bool) -> [a] -> [a]
% [a] predicate /f.dropWhile [a]
/f.dropWhile { 
	[0]
	[/.xs /.predicate /.i] let
		{
			0 1 .xs length 1 sub { % for 0..length-1
				dup .i 0  3 -1 roll  put 				% set current index
				.xs exch get 							% get current value
				.predicate exec not { % if
					exit
				} if
			} for
			.xs .i 0 get dup .xs length exch sub getinterval
		} a.localBind
	end
	exec
}.


% [a] predicate /f.dropWhile* [a]
/f.dropWhile* { 
	{exec {1 add} {exit} ifelse} exch cons 		% [a] predicate*
	0 exch 2 index exch 						% [a] 0 [a] predicate*
	forall 										% [a] count
	dup 2 index length exch sub getinterval
}.


% Assertions
[
	{ [] {3 lt} f.dropWhile [] deepEq }
	{ [1 2 3 4 5] {3 lt} f.dropWhile [3 4 5] deepEq }
	{ {1 2 3.0 add bla} {type /integertype eq} f.dropWhile {3.0 add bla} deepEq }
	{ (abcdef) {(d) head lt} f.dropWhile (def) deepEq }
] d.assert!


% span, applied to a predicate p and a list xs, returns a tuple where
% first element is longest prefix (possibly empty) of xs of elements 
% that satisfy p and second element is the remainder of the list
%
% span p xs is equivalent to (takeWhile p xs, dropWhile p xs)
%
% span :: (a -> Bool) -> [a] -> ([a], [a])
% [a] predicate /f.span [a]
/f.span { 
	[0]
	[/.xs /.predicate /.i] let
		{
			0 1 .xs length 1 sub { % for 0..length-1
				dup .i 0  3 -1 roll  put 				% set current index
				.xs exch get 							% get current value
				.predicate exec not { % if
					exit
				} if
			} for
			.xs 0 .i 0 get getinterval
			.xs .i 0 get dup .xs length exch sub getinterval
		} a.localBind
	end
	exec
}.


% [a] predicate /f.span* [a]
/f.span* { 
	{exec {1 add} {exit} ifelse} exch cons 		% [a] predicate*
	0 exch 2 index exch 						% [a] 0 [a] predicate*
	forall 										% [a] count
	2 copy
	0 exch getinterval 							% [a] count (take count)
	3 1 roll
	dup 2 index length exch sub getinterval 	% (take count) (drop count)
}.


% Assertions
[
	{ [[] {3 lt} f.span] [[] []] deepEq }
	{ [[1 2 3 4 5] {3 lt} f.span] [[1 2] [3 4 5]] deepEq }
	{ [{1 2 3.0 add bla} {type /integertype eq} f.span] [{1 2} {3.0 add bla}] deepEq }
	{ [(abcdef) {(d) head lt} f.span] [(abc) (def)] deepEq }
] d.assert!


% break, applied to a predicate p and a list xs, returns a tuple where 
% first element is longest prefix (possibly empty) of xs of elements that
% do not satisfy p and second element is the remainder of the list
%
% break p is equivalent to span (not . p)
%
% break :: (a -> Bool) -> [a] -> ([a], [a])
% [a] predicate /f.break [a]
/f.break { 
	[0]
	[/.xs /.predicate /.i] let
		{
			0 1 .xs length 1 sub { % for 0..length-1
				dup .i 0  3 -1 roll  put 				% set current index
				.xs exch get 							% get current value
				.predicate exec { % if
					exit
				} if
			} for
			.xs 0 .i 0 get getinterval
			.xs .i 0 get dup .xs length exch sub getinterval
		} a.localBind
	end
	exec
}.


% [a] predicate /f.break* [a]
/f.break* { 
	{exec not {1 add} {exit} ifelse} exch cons 	% [a] predicate*
	0 exch 2 index exch 						% [a] 0 [a] predicate*
	forall 										% [a] count
	2 copy
	0 exch getinterval 							% [a] count (take count)
	3 1 roll
	dup 2 index length exch sub getinterval 	% (take count) (drop count)
}.


% Assertions
[
	{ [[] {3 lt not} f.break] [[] []] deepEq }
	{ [[1 2 3 4 5] {3 lt not} f.break] [[1 2] [3 4 5]] deepEq }
	{ [{1 2 3.0 add bla} {type /integertype eq not} f.break] [{1 2} {3.0 add bla}] deepEq }
	{ [(abcdef) {(d) head lt not} f.break] [(abc) (def)] deepEq }
] d.assert!





%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Searching with a predicate 

% The find function takes a predicate and a structure and returns the 
% leftmost element of the structure matching the predicate, or Nothing 
% if there is no such element.
%
% find :: Foldable t => (a -> Bool) -> t a -> Maybe a
% [a] predicate /f.find a true | false
/f.find {
	[0]
	[/.xs /.predicate /.i] let
		{
			0 1 .xs length 1 sub { % for 0..length-1
				dup .i 0  3 -1 roll  put 				% set current index
				.xs exch get 							% get current value
				.predicate exec { % if
					.xs .i 0 get get true
					.i 0 -1 put 						% mark as found
					exit
				} if
			} for
			.i 0 get 0 ge {false} if
		} a.localBind
	end
	exec
}.


% [a] predicate /f.find* a true | false
/f.find* {
	false 3 1 roll
	{exec not {pop} {exch pop true exit} if} exch cons
	{dup} head cons
	forall
}.


% [a] predicate /f.find* a true | false
/f.find* {
	false
	3 1 roll 		% false foldable predicate
	exch			% false predicate foldable
	{ % false predicate elem
		dup 2 index exec { 	% false predicate elem
			true 4 -2 roll pop
			exit
		} if
		pop
	} forall
	pop
}.


% Assertions
[
	{ [[0 1 2 3 4 5] {2 gt} f.find] [3 true] deepEq } 
	{ [[0 1 2 3 4 5] {5 gt} f.find] [false] deepEq } 
	{ [{1 add 2 div} {xcheck} f.find] [/add true] deepEq }
] d.assert!


% filter, applied to a predicate and a list, returns the list of those elements that satisfy the predicate
%
% filter :: (a -> Bool) -> [a] -> [a]
% [a] predicate /f.filter [a]
/f.filter { 
	[0] [0] 3 index dup length exch type /stringtype eq {string} {array} ifelse
	[/.xs /.predicate /.i /.j /.result] let
        { 
            0 1 .xs length 1 sub { % for 0..length-1
                dup .i 0  3 -1 roll  put 
                .xs exch get 
                .predicate exec { % if
                	.result 
                	.j 0 get exch 1 index
                	.xs .i 0 get get 
                	put 						% result[j] = xs[i]
                	1 add .j 0 3 -1 roll put 	% j++
                } if
            } for 
            .result 0 .j 0 get getinterval
            .xs xcheck {cvx} if
        } a.localBind 
    end 
    exec 
}.


% [a] predicate /f.filter* [a]
/f.filter* { 
	{exec not {pop} if} exch cons
	{dup} head cons
	f.map*
}.


% Assertions
[
	{ [] {2 gt} f.filter [] deepEq } 
	{ [0 1 2 3 4 5] {2 mod 0 eq} f.filter [0 2 4] deepEq } 
	{ {1 add 2 div} {xcheck} f.filter {add div} deepEq }
] d.assert!


% The partition function takes a predicate a list and returns the pair of 
% lists of elements which do and do not satisfy the predicate, respectively.
%
% partition :: (a -> Bool) -> [a] -> ([a], [a])
% [a] predicate /f.partition [dos] [donts]
/f.partition { 
	[0] [0] [0]
	4 index dup length exch type 2 copy
	/stringtype eq {string} {array} ifelse
	3 1 roll
	/stringtype eq {string} {array} ifelse
	[/.xs /.predicate /.i /.j /.k /.dos /.donts] let
        { 
            0 1 .xs length 1 sub { % for 0..length-1
                dup .i 0  3 -1 roll  put 
                .xs exch get 
                .predicate exec { % ifelse
                	.dos 
                	.j 0 get exch 1 index
                	.xs .i 0 get get 
                	put 						% dos[j] = xs[i]
                	1 add .j 0 3 -1 roll put 	% j++
                } { % ifelse
                	.donts
                	.k 0 get exch 1 index
                	.xs .i 0 get get 
                	put 						% donts[k] = xs[i]
                	1 add .k 0 3 -1 roll put 	% k++
                } ifelse
            } for 
            .dos 0 .j 0 get getinterval
            .donts 0 .k 0 get getinterval
            .xs xcheck {cvx exch cvx exch} if
        } a.localBind 
    end 
    exec 
}.


% [a] predicate /f.partition* [dos] [donts]
/f.partition* { 
	mark mark 3 index length 0 5 index 6 -1 roll  		% [a] mark mark len 0 [a] predicate
	{
		exec 						% [a] mark b1..bn mark c1..cm len m x
		{3 1 roll 1 add} {		
			1 index 4 add 1 roll 	% [a] mark b1..bn x mark c1..cm len m
		} ifelse
	} exch cons	{dup} head cons 	% [a] mark mark len 0 [a] predicate*
	forall 							% [a] mark b1..bn mark c1..cm len m
	dup 3 add 2 roll 				% [a] mark b1..bn len m mark c1..cm
	] 								% [a] mark b1..bn len m [c]
	3 1 roll sub 2 add 1 roll 		% [a] [c] mark b1..bn
	] 								% [a] [c] [b]
	2 index /stringtype eq {s.fromArray exch s.fromArray exch} {
		2 index xcheck {cvx exch cvx exch} if
	} ifelse						% [a] [c] [b]
	3 -1 roll pop 					% [c] [b]
}.


% /f.partition { 
% 	1 index type 0 0 4 index 5 -2 roll  			% type 0 0 [a] predicate
% 	{
% 		exec 						% a1..an b1..bm type n m x
% 		{4 1 roll 1 add} {		
% 			1 index 4 add 1 roll 	% a1..an x b1..bm type n m
% 			exch 1 add exch			% a1..an x b1..bm type n m
% 		} ifelse
% 	} exch cons	{dup} head cons 	% type 0 0 [a] predicate*
% 	forall 							% a0..an b0..bm type n m
% 	3 copy  						% a0..an b0..bm type n m type n m
% 	5 add 2 roll exch pop			% a0..an type n b0..bm type m
% 	dup 3 -1 roll
% 	exch /stringtype eq {string} {array} 	% a0..an type n b0..bm m arrayM
% 	4 2 roll 						% a0..an b0..bm m arrayM type n
% 	0 4 index putinterval
% 
% }.


% Assertions
[
	{ [[] {2 gt} f.partition] [[] []] deepEq } 
	{ [[0 1 2 3 4 5] {2 mod 0 eq} f.partition] [[0 2 4] [1 3 5]] deepEq } 
	{ [{1 add 2 div} {xcheck} f.partition] [{add div} {1 2}] deepEq }
] d.assert!




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Indexing lists

% The elemIndex function returns the index of the first element in the given
% list which is equal (by ==) to the query element, or Nothing if there is
% no such element.
%
% elemIndex :: Eq a => a -> [a] -> Maybe Int
% [a] x /f.elemIndex int true | false
/f.elemIndex {
	[0]
	[/.xs /.x /.i] let
		{
			0 1 .xs length 1 sub { % for 0..length-1
				dup .i 0  3 -1 roll  put 				% set current index
				.xs exch get 							% get current value
				.x eq { % if
					.i 0 get true
					.i 0 -1 put 						% mark as found
					exit
				} if
			} for
			.i 0 get 0 ge {false} if
		} a.localBind
	end
	exec
}.


% Assertions
[
	{ [[0 1 2 3 4 5] 3 f.elemIndex] [3 true] deepEq } 
	{ [[0 1 2 3 4 5] 6 f.elemIndex] [false] deepEq } 
	{ [{1 add 2 div} /add f.elemIndex] [1 true] deepEq }
] d.assert!


% The elemIndices function extends elemIndex, by returning the indices of all
% elements equal to the query element, in ascending order.
%
% elemIndices :: Eq a => a -> [a] -> [Int]
% [a] x /f.elemIndices [int]
/f.elemIndices {
	[0] [0] 3 index length array
	[/.xs /.x /.i /.j /.result] let
        { 
            0 1 .xs length 1 sub { % for 0..length-1
                dup .i 0  3 -1 roll  put 
                .xs exch get 
                .x eq { % if
                	.result 
                	.j 0 get exch 1 index
                	.i 0 get
                	put 						% result[j] = i
                	1 add .j 0 3 -1 roll put 	% j++
                } if
            } for 
            .result 0 .j 0 get getinterval
        } a.localBind 
    end 
    exec 
}.


% Assertions
[
	{ [] 2 f.elemIndices [] deepEq } 
	{ [0 1 2 3 1 5] 1 f.elemIndices [1 4] deepEq } 
	{ {0 div 2 div} /div f.elemIndices [1 3] deepEq }
] d.assert!


% The findIndex function takes a predicate and a list and returns the index
% of the first element in the list satisfying the predicate, or Nothing if 
% there is no such element.
%
% findIndex :: (a -> Bool) -> [a] -> Maybe Int Source#
% [a] predicate /f.findIndex int true | false
/f.findIndex {
	[0]
	[/.xs /.predicate /.i] let
		{
			0 1 .xs length 1 sub { % for 0..length-1
				dup .i 0  3 -1 roll  put 				% set current index
				.xs exch get 							% get current value
				.predicate exec { % if
					.i 0 get true
					.i 0 -1 put 						% mark as found
					exit
				} if
			} for
			.i 0 get 0 ge {false} if
		} a.localBind
	end
	exec
}.


% Assertions
[
	{ [[0 1 2 3 4 5] {3 eq} f.findIndex] [3 true] deepEq } 
	{ [[0 1 2 3 4 5] {6 eq} f.findIndex] [false] deepEq } 
	{ [{1 add 2 div} {/add eq} f.findIndex] [1 true] deepEq }
] d.assert!


% The findIndices function extends findIndex, by returning the indices of 
% all elements satisfying the predicate, in ascending order.
%
% findIndices :: (a -> Bool) -> [a] -> [Int]
% [a] predicate /f.findIndices [int]
/f.findIndices {
	[0] [0] 3 index length array
	[/.xs /.predicate /.i /.j /.result] let
        { 
            0 1 .xs length 1 sub { % for 0..length-1
                dup .i 0  3 -1 roll  put 
                .xs exch get 
                .predicate exec { % if
                	.result 
                	.j 0 get exch 1 index
                	.i 0 get
                	put 						% result[j] = i
                	1 add .j 0 3 -1 roll put 	% j++
                } if
            } for 
            .result 0 .j 0 get getinterval
        } a.localBind 
    end 
    exec 
}.


% Assertions
[
	{ [] {2 eq} f.findIndices [] deepEq } 
	{ [0 1 2 3 1 5] {1 eq} f.findIndices [1 4] deepEq } 
	{ {0 div 2 div} {/div eq} f.findIndices [1 3] deepEq }
] d.assert!


% array|string|proc init proc /f.fold array|string|proc 
/f.fold {
	&213 forall 
}.


%end	% preludeFn

%%EndProlog

%%BeginSetup
%%EndSetup

%%BeginScript
%%EndScript

%%Trailer
%%EOF
