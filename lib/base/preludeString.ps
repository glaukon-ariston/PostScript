%!PS-Adobe-3.0
%%Title: preludeString.ps
%%Creator: github.com/glaukon-ariston
%%Copyright: Glaukon Ariston. All Rights Reserved
%%Date: 14/01/2019
%%LanguageLevel: 3
%%EndComments


%/preludeString <<>> def
%preludeString begin


% a b /s.append ab
/s.append { 
    [ 3 1 roll ] s.concat
}.


% a1..an string[N] /s.store string
/s.store { 
    dup length mark exch 2 add 2 roll ]
    exch
    s.fromArray**
}.


% string /s.dimension height width
/s.dimension {
    gsave                                  % save graphic context
        0 0 moveto                         % move to some point 
        false charpath flattenpath pathbbox     % gets text path bounding box (LLx LLy URx URy)
        3 1 roll sub                    % LLx URx URy-LLy
        3 -1 roll exch sub              % URy-LLy URx-LLx
        exch
    grestore                               % restore graphic context
} bind def


% string marker /s.stripAfter string
/s.stripAfter {<<>>begin 
    search {
        % post match pre
        3 1 roll
        pop
        pop
    } if
end} def


% string padding n /s.padLeft string
/s.padLeft {
    2 index length 
    sub dup 0 gt
    {   1 sub
        % string padding n'
        mark 4 1 roll 
        { dup } repeat 
        counttomark -1 roll
        ] s.concat
    } { pop
        pop
    } ifelse
} bind def


% container elem /s.in bool
/s.in {
    search { % post match pre
        pop pop pop true
    } { % string
        pop false
    } ifelse
}.


% PLRM page 27. TABLE 3.1 White-space characters
% - /s.whitespace string
/s.whitespace ( \t\f\r\n\000) .


% string delimiters /s.trimLeft string
/s.trimLeft {<<>>begin
    /delimiters ;
    /str ;
    /lastNonSpace str length def 
    /firstNonSpace 0 def
    {
        firstNonSpace lastNonSpace ge {exit} if
        delimiters
            str firstNonSpace 1 getinterval 
            s.in not {exit} if
        /firstNonSpace 1 +=
    } loop
    str  firstNonSpace  lastNonSpace firstNonSpace sub  getinterval
end}.


% string delimiters /s.trimRight string
/s.trimRight {<<>>begin
    /delimiters ;
    /str ;
    /lastNonSpace str length 1 sub def
    {
        lastNonSpace 0 lt {exit} if
        delimiters
            str lastNonSpace 1 getinterval 
            s.in not {exit} if
        /lastNonSpace 1 -=
    } loop
    /firstNonSpace 0 def
    str  firstNonSpace  lastNonSpace firstNonSpace sub 1 add  getinterval
end}.


% string delimiters /s.trimBoth string
/s.trimBoth {<<>> begin
    /delimiters ;
    /str ;
    /lastNonSpace str length 1 sub . 
    {
        lastNonSpace 0 lt {exit} if
        delimiters
            str lastNonSpace 1 getinterval 
            s.in not {exit} if
        /lastNonSpace 1 -=
    } loop
    /firstNonSpace 0 def
    {
        firstNonSpace lastNonSpace ge {exit} if
        delimiters
            str firstNonSpace 1 getinterval 
            s.in not {exit} if
        /firstNonSpace 1 +=
    } loop
    str  firstNonSpace  lastNonSpace firstNonSpace sub 1 add  getinterval
end}.


% Assertions
[
    { () //s.whitespace s.trimLeft () deepEq }
    { //s.whitespace //s.whitespace s.trimLeft () deepEq }
    { (\t- filepath\n) //s.whitespace s.trimLeft (- filepath\n) deepEq }
    { (nothing_to_be_trimmed) //s.whitespace s.trimLeft (nothing_to_be_trimmed) deepEq }

    { () //s.whitespace s.trimRight () deepEq }
    { //s.whitespace //s.whitespace s.trimRight () deepEq }
    { (\t- filepath\n) //s.whitespace s.trimRight (\t- filepath) deepEq }
    { (nothing_to_be_trimmed) //s.whitespace s.trimRight (nothing_to_be_trimmed) deepEq }

    { () //s.whitespace s.trimBoth () deepEq }
    { //s.whitespace //s.whitespace s.trimBoth () deepEq }
    { (\t- filepath\n) //s.whitespace s.trimBoth (- filepath) deepEq }
    { (nothing_to_be_trimmed) //s.whitespace s.trimBoth (nothing_to_be_trimmed) deepEq }
] d.assert!


% string delimiters /s.split* [words] [separations]
/s.split* {<<>>begin
    [/sentence /delimiters]#=
    /left 0 def
    /right 0 def
    /limit sentence length 1 sub def

    % if the string starts with a delimiter, then add an empty element to the words list
    /words 
        delimiters
        sentence 0 1 getinterval
        search { % post match pre
            pop pop pop [()]
        } { % string
            pop [] 
        } ifelse
        def
    /separations [].

    { % loop
        % skip delimiters (find the beginning of a word)
        false
        right 1 limit {
            dup sentence exch 1 getinterval
            delimiters exch search { % index post match pre
                pop pop pop pop
            } { % index string
                pop 
                /left exch def
                pop true
                % check if we have seen sonme delimiters, then record the separation 
                left right gt {
                    sentence right left right sub getinterval
                    separations exch append /separations ;
                } if
                exit
            } ifelse
        } for
        % exit the loop if we reached the end of the sentence
        not {
            words () append /words ;
            sentence right limit right sub 1 add getinterval
            separations exch append /separations ;
            exit
        } if
        
        % skip non-delimiters (find the end of the word)
        false
        left 1 add 1 limit {
            dup sentence exch 1 getinterval
            delimiters exch search { % index post match pre
                pop pop pop
                /right exch def
                pop true
                exit
            } { % index string
                pop pop
            } ifelse
        } for
        not {/right limit 1 add def} if % terminate the word if we reached the end of the sentence

        % append the new word to the list
        words 
            sentence left right left sub getinterval
            append /words ;

        % terminate if we reached the endo of the sentence
        right limit gt {exit} if
    } loop
    words separations
end}.


% string delimiters /s.split [words] [separations]
/s.split {
    1 index length 0 eq {
        pop pop [] []
    } {
        s.split*
    } ifelse
}.


% Assertions
[
    { [() //s.whitespace s.split] [[] []] deepEq } 
    { [//s.whitespace //s.whitespace s.split] [[() ()] [//s.whitespace]] deepEq } 
    { [(The_one_and_only) //s.whitespace s.split] [[(The_one_and_only)] []] deepEq } 
    { [(\nThe_second_item) //s.whitespace s.split] [[() (The_second_item)] [(\n)]] deepEq } 
    { [(\nThe_second_item\r) //s.whitespace s.split] [[() (The_second_item) ()] [(\n) (\r)]] deepEq } 
    { [(War is Peace, Freedom is Slavery, Ignorance is Strength) //s.whitespace s.split] [[(War) (is) (Peace,) (Freedom) (is) (Slavery,) (Ignorance) (is) (Strength)] [( ) ( ) ( ) ( ) ( ) ( ) ( ) ( ) ]] deepEq } 
    { [(War is Peace, Freedom is Slavery, Ignorance is Strength) //s.whitespace (,) s.append s.split] [[(War) (is) (Peace) (Freedom) (is) (Slavery) (Ignorance) (is) (Strength)] [( ) ( ) (, ) ( ) ( ) (, ) ( ) ( ) ]] deepEq }
    { [(C:\\Tata\\Audio\\Glazba\\ProfilKlett\\Glazbena petica_Glazbeni primjeri 1\\01 Track 1.mp3) (\\) s.split] [[(C:) (Tata) (Audio) (Glazba) (ProfilKlett) (Glazbena petica_Glazbeni primjeri 1) (01 Track 1.mp3)] [(\\) (\\) (\\) (\\) (\\) (\\)]] deepEq }
] d.assert!


% [(a) (b) ... (z)] separator /s.join (aSbS...Sz)
/s.join { 
    1 index length 0 eq { %ifelse
        % zero length input
        pop pop ()
    } {
        % calculate the final string length
        0 2 index {
            length add
            1 index length add
        } forall
        1 index length sub
        string       % [s] sep string
        % copy the first element into the string
        3 -1 roll uncons                        % sep string [a2..an] a1
        dup 3 index 0 3 -1 roll putinterval     % sep string [a2..an] a1
        length exch                             % sep string index [a2..an]
        {                       % sep string index s
            4 copy pop 3 -1 roll    % sep string index s string index sep
            putinterval             % sep string index s
            exch 3 index length add exch % sep string index s
            
            % now do the same thing again for the element string
            3 copy              % sep string index s string index s
            putinterval         % sep string index s
            length add          % sep string index
        } forall 
        % sep string index
        pop exch pop
    } ifelse
}.


% Assertions
[
    { [] (\n) s.join () deepEq } 
    { [()] (\n) s.join () deepEq } 
    { [() ()] (\n) s.join (\n) deepEq } 
    { [() () ()] (\n) s.join (\n\n) deepEq } 
    { [(War is Peace) (Freedom is Slavery) (Ignorance is Strength)] (, ) s.join (War is Peace, Freedom is Slavery, Ignorance is Strength) deepEq } 
] d.assert!


%end    % preludeString

%%EndProlog

%%BeginSetup
%%EndSetup

%%BeginScript
%%EndScript

%%Trailer
%%EOF
